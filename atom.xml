<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Only Hunam]]></title>
  <link href="http://nadavwr.github.io/atom.xml" rel="self"/>
  <link href="http://nadavwr.github.io/"/>
  <updated>2013-05-05T06:48:27+03:00</updated>
  <id>http://nadavwr.github.io/</id>
  <author>
    <name><![CDATA[Nadav Wiener]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Adjectives in Scala]]></title>
    <link href="http://nadavwr.github.io/blog/2013/05/05/adjectives-in-scala/"/>
    <updated>2013-05-05T05:59:00+03:00</updated>
    <id>http://nadavwr.github.io/blog/2013/05/05/adjectives-in-scala</id>
    <content type="html"><![CDATA[<p>Last year I had the pleasure of working a period of time for Yoav Hollander (creator of the <a href="http://en.wikipedia.org/wiki/E_%28verification_language%29">e verification language</a>). During that time, I came across a very nice piece of syntactic sugar in <em>e</em>. I don&#8217;t recall how he used to call it, but I understood it as being all about extracting adjectives from a class, for unambiguous use during instance construction.</p>

<p>I&#8217;ve had it in my mind to try to achieve something similar in Scala. Here is a contrived example in invalid Scala pseudo code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">object</span> <span class="nc">Length</span> <span class="k">extends</span> <span class="nc">Enumeration</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">type</span> <span class="kt">Length</span> <span class="o">=</span> <span class="nc">Value</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">short</span><span class="o">,</span> <span class="n">long</span> <span class="k">=</span> <span class="nc">Value</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="k">import</span> <span class="nn">Length._</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Book</span><span class="o">(</span><span class="n">interesting</span><span class="k">:</span> <span class="kt">Boolean</span> <span class="o">=</span> <span class="kc">false</span><span class="o">,</span> <span class="n">length</span><span class="k">:</span> <span class="kt">Length</span> <span class="o">=</span> <span class="n">short</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">myBook</span><span class="k">:</span> <span class="kt">Book</span> <span class="o">=</span> <span class="n">a</span> <span class="n">long</span> <span class="n">interesting</span> <span class="nc">Book</span> <span class="c1">// &lt;-- this</span>
</span></code></pre></td></tr></table></div></figure>


<p>This syntax could allow some very expressive code when modeling a domain using a few case classes. It could also be made to work well with default parameter values and monoidal zeros, for some additional conciseness.</p>

<p>Notice that this has several requirements/limitations for the class being constructed:</p>

<ol>
<li>parameter-less instantiation, i.e.: zero-arg constructor, default parameter values, or a provided builder function</li>
<li>no ambiguity &#8211; adjectives can only be extracted if the can be uniquely associated with a single property of the class. (e.g., having two <code>Length</code> would prevent us from using <code>long</code> as an adjective)</li>
</ol>


<p>The pseudo code shown above is impossible to mimic directly in Scala, but I&#8217;ve been getting pretty close so far.</p>

<p>I started out by trying to build the necessary boilerplate. In the future I hope to add macros for extracting adjectives from classes, which is what&#8217;s needed to make this truly useful.</p>

<p>At first I only considered case classes with default parameter values as candidates, but I later realized there&#8217;s nothing to stop this from being applied to mutable classes (by extracting adjectives from e.g., vars, setters, parameterless mutators).</p>

<p>An adjective can be described as a function from Noun to Noun: <code>type Adj[Noun] = Noun =&gt; Noun</code>.<br/>
A sequence of adjectives (disregarding English terminology&#8230;) can itself be regarded as an adjective by folding the adjectives over the noun. See the definition of <code>a</code> below:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">object</span> <span class="nc">Adjectives</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">type</span> <span class="kt">Adj</span><span class="o">[</span><span class="kt">Noun</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Noun</span> <span class="k">=&gt;</span> <span class="nc">Noun</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">a</span><span class="o">[</span><span class="kt">Noun</span><span class="o">](</span><span class="n">description</span><span class="k">:</span> <span class="kt">Adj</span><span class="o">[</span><span class="kt">Noun</span><span class="o">]*)</span><span class="k">:</span> <span class="kt">Adj</span><span class="o">[</span><span class="kt">Noun</span><span class="o">]</span> <span class="k">=</span> <span class="n">noun0</span> <span class="k">=&gt;</span>
</span><span class='line'>    <span class="o">(</span><span class="n">noun0</span> <span class="o">/:</span> <span class="n">description</span><span class="o">)</span> <span class="o">{</span> <span class="o">(</span><span class="n">noun</span><span class="o">,</span> <span class="n">adjective</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">adjective</span><span class="o">(</span><span class="n">noun</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="k">import</span> <span class="nn">Adjectives._</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&#8217;s now define the case class <code>Book</code> again, and add some adjectives:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">object</span> <span class="nc">Length</span> <span class="k">extends</span> <span class="nc">Enumeration</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">type</span> <span class="kt">Length</span> <span class="o">=</span> <span class="nc">Value</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">short</span><span class="o">,</span> <span class="n">long</span> <span class="k">=</span> <span class="nc">Value</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="k">import</span> <span class="nn">Length._</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">Book</span><span class="o">(</span><span class="n">interesting</span><span class="k">:</span> <span class="kt">Boolean</span> <span class="o">=</span> <span class="kc">false</span><span class="o">,</span> <span class="n">length</span><span class="k">:</span> <span class="kt">Length</span> <span class="o">=</span> <span class="nc">Length</span><span class="o">.</span><span class="n">short</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// in the future I will want to derive these automatically using macros:</span>
</span><span class='line'><span class="k">object</span> <span class="nc">BookAdjectives</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">interesting</span><span class="k">:</span> <span class="kt">Adj</span><span class="o">[</span><span class="kt">Book</span><span class="o">]</span> <span class="k">=</span> <span class="k">_</span><span class="o">.</span><span class="n">copy</span><span class="o">(</span><span class="n">interesting</span> <span class="k">=</span> <span class="kc">true</span><span class="o">)</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">long</span><span class="k">:</span> <span class="kt">Adj</span><span class="o">[</span><span class="kt">Book</span><span class="o">]</span> <span class="k">=</span> <span class="k">_</span><span class="o">.</span><span class="n">copy</span><span class="o">(</span><span class="n">length</span> <span class="k">=</span> <span class="nc">Length</span><span class="o">.</span><span class="n">long</span><span class="o">)</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">short</span><span class="k">:</span> <span class="kt">Adj</span><span class="o">[</span><span class="kt">Book</span><span class="o">]</span> <span class="k">=</span> <span class="k">_</span><span class="o">.</span><span class="n">copy</span><span class="o">(</span><span class="n">length</span> <span class="k">=</span> <span class="nc">Length</span><span class="o">.</span><span class="n">short</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="k">import</span> <span class="nn">BookAdjectives._</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">book</span> <span class="k">=</span> <span class="n">a</span> <span class="o">(</span><span class="n">long</span><span class="o">,</span> <span class="n">interesting</span><span class="o">)</span> <span class="o">(</span><span class="nc">Book</span><span class="o">())</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>(Book())</code> at the end looks particularly awkward. This can be fixed by some additional boilerplate:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">language.postfixOps</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">BookAdjectives</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// ...skipping previous definitions</span>
</span><span class='line'>  <span class="k">implicit</span> <span class="k">class</span> <span class="nc">BookBuilder</span><span class="o">(</span><span class="n">description</span><span class="k">:</span> <span class="kt">Adj</span><span class="o">[</span><span class="kt">Book</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">def</span> <span class="nc">Book</span> <span class="k">=</span> <span class="n">description</span><span class="o">(</span><span class="nc">Book</span><span class="o">())</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="k">import</span> <span class="nn">BookAdjectives._</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which allows us the nicer <code>val book = a (long, interesting) Book</code>.</p>

<p>As I mentioned before, this could just as easily be generalized to, e.g., mutable classes with vars:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">Book</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">var</span> <span class="n">interesting</span><span class="k">:</span> <span class="kt">Boolean</span> <span class="o">=</span> <span class="k">_</span>
</span><span class='line'>  <span class="k">var</span> <span class="n">length</span><span class="k">:</span> <span class="kt">Length</span> <span class="o">=</span> <span class="k">_</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">Adjectives._</span> <span class="c1">// same as above</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// I hope to also be able to generate these in the future</span>
</span><span class='line'><span class="k">object</span> <span class="nc">BookAdjectives</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">interesting</span><span class="k">:</span> <span class="kt">Adj</span><span class="o">[</span><span class="kt">Book</span><span class="o">]</span> <span class="k">=</span> <span class="n">book</span> <span class="k">=&gt;</span> <span class="o">{</span> <span class="n">book</span><span class="o">.</span><span class="n">interesting</span> <span class="k">=</span> <span class="kc">true</span><span class="o">;</span> <span class="n">book</span> <span class="o">}</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">long</span><span class="k">:</span> <span class="kt">Adj</span><span class="o">[</span><span class="kt">Book</span><span class="o">]</span> <span class="k">=</span> <span class="n">book</span> <span class="k">=&gt;</span> <span class="o">{</span> <span class="n">book</span><span class="o">.</span><span class="n">length</span> <span class="k">=</span> <span class="nc">Length</span><span class="o">.</span><span class="n">long</span><span class="o">;</span> <span class="n">book</span> <span class="o">}</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">short</span><span class="k">:</span> <span class="kt">Adj</span><span class="o">[</span><span class="kt">Book</span><span class="o">]</span> <span class="k">=</span> <span class="n">book</span> <span class="k">=&gt;</span> <span class="o">{</span> <span class="n">book</span><span class="o">.</span><span class="n">length</span> <span class="k">=</span> <span class="nc">Length</span><span class="o">.</span><span class="n">short</span><span class="o">;</span> <span class="n">book</span> <span class="o">}</span>
</span><span class='line'>  <span class="k">implicit</span> <span class="k">class</span> <span class="nc">BookBuilder</span><span class="o">(</span><span class="n">description</span><span class="k">:</span> <span class="kt">Adj</span><span class="o">[</span><span class="kt">Book</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">def</span> <span class="nc">Book</span> <span class="k">=</span> <span class="n">description</span><span class="o">(</span><span class="k">new</span> <span class="nc">Book</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="k">import</span> <span class="nn">BookAdjectives._</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">book</span> <span class="k">=</span> <span class="n">a</span> <span class="o">(</span><span class="n">long</span><span class="o">,</span> <span class="n">interesting</span><span class="o">)</span> <span class="nc">Book</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can also add default reflection-based instantiation, making <code>BookBuilder</code> even more brain-dead:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">scala.reflect._</span>
</span><span class='line'>
</span><span class='line'><span class="k">trait</span> <span class="nc">Adjectives</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">protected</span> <span class="k">implicit</span> <span class="k">class</span> <span class="nc">NounBuilder</span><span class="o">[</span><span class="kt">Noun</span> <span class="kt">:</span> <span class="kt">ClassTag</span><span class="o">](</span><span class="n">description</span><span class="k">:</span> <span class="kt">Adj</span><span class="o">[</span><span class="kt">Noun</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// TODO: should be made to also support case classes with default parameters</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">def</span> <span class="n">newInstance</span> <span class="k">=</span> <span class="n">implicitly</span><span class="o">[</span><span class="kt">ClassTag</span><span class="o">[</span><span class="kt">Noun</span><span class="o">]].</span><span class="n">runtimeClass</span><span class="o">.</span><span class="n">newInstance</span><span class="o">.</span><span class="n">asInstanceOf</span><span class="o">[</span><span class="kt">Noun</span><span class="o">]</span>
</span><span class='line'>    <span class="k">def</span> <span class="n">build</span> <span class="k">=</span> <span class="n">description</span><span class="o">(</span><span class="n">newInstance</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">BookAdjectives</span> <span class="k">extends</span> <span class="nc">Adjectives</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// same adjectives as before...</span>
</span><span class='line'>  <span class="k">implicit</span> <span class="k">class</span> <span class="nc">BookBuilder</span><span class="o">(</span><span class="n">description</span><span class="k">:</span> <span class="kt">Adj</span><span class="o">[</span><span class="kt">Book</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">def</span> <span class="nc">Book</span> <span class="k">=</span> <span class="n">description</span><span class="o">.</span><span class="n">build</span> <span class="c1">// available from NounBuilder</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Though I suspect I can just reify <code>def Book = new Book</code> and it will work for both cases (class Book, as well as case class Book with default parameters).</p>

<p>Next post on this subject will include some of the missing macro work.</p>
]]></content>
  </entry>
  
</feed>
